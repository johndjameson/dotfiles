# ----------------------------------------------------
#
#   Functions
#   -> Specified tasks
#
# ----------------------------------------------------

# ----------------------------------------------------
#   Dependencies
# ----------------------------------------------------

# ----- Path ----- #

# Echo the working directory without the full path
working_directory() {
  printf $(basename "$(pwd)")
}

# ----- Git ----- #

# Show the Git branch if it's a repo
branch_if_repo() {
  if [ "$(which git)" ] && [[ -d ./.git ]]; then
    # Working directory clean
    if (( $(git status --porcelain | wc -l | tr -d "[:space:]") == 0 )); then
      printf "$(tput setaf $GREEN)($(parse_git_branch))"

    # Working directory dirty
    else

      # Untracked files
      if [[ $(git status --porcelain | grep -c "^ \?\?") -gt 0 ]]; then
        printf "$(tput setaf $RED)($(parse_git_branch))"

      # Modified/removed files
      else
        printf "$(tput setaf $YELLOW)($(parse_git_branch))"
      fi
    fi
  fi
}

# Get the current Git branch
parse_git_branch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  printf "${ref#refs/heads/}"
}

# Beautify `git status` output, add fallback text
shorten_git_status() {
  # Working directory clean
  if [ $(git status --porcelain | wc -l | tr -d ' ') -eq 0 ]; then
    printf "\nnothing to commit, working directory clean\n"

  # Working directory dirty
  else
    printf "\n"
    git status --short
  fi
}

# ----------------------------------------------------
#   Commands
# ----------------------------------------------------

# Make directory and navigate to it
mkcd() {
  mkdir -p "$1"
  cd "$1"
}

# Extract external ZIP archive
dlz() {
  # -L must come before -o to follow redirection
  curl -s -L -o .tempzip "$1"
  unzip -q .tempzip
  rm .tempzip
}
