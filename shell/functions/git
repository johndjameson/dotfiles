# ****************************************************
#
#   Functions - Git
#   -> Git-specified tasks
#
# ****************************************************

# ----------------------------------------------------
#   Commands
# ----------------------------------------------------

# ----- Reset (Soft) ----- #
# Soft reset the branch back a number of commits
#
# $1 - '1', '2', ...
#
# Usage: `git_reset_soft 1`

function git_reset_soft() {
  git reset --soft "HEAD~$1"
}

# ----- Tag ----- #
# Automatically set a git tag based on Semantic Versioning keyword
# (via @drewbarontini)
#
# $1 - 'major', 'minor', 'patch'
#
# Usage: `git_tag major`

function git_tag() {
  local tag=$(git describe --abbrev=0 --tags 2>/dev/null)
  local prefix=$(echo $tag | grep -o --color=never "[A-z]\+")
  local major=$(echo $tag | cut -d '.' -f1 | grep -o --color=never "[0-9]")
  local minor=$(echo $tag | cut -d '.' -f2)
  local patch=$(echo $tag | cut -d '.' -f3)

  case "$1" in
    'major')
      local nmajor=$(($major+1))
      local version="$nmajor.0.0"
      ;;
    'minor')
      local nminor=$(($minor+1))
      local version="$major.$nminor.0"
      ;;
    'patch')
      local npatch=$(($patch+1))
      local version="$major.$minor.$npatch"
      ;;
    *)
      echo "Automatically set a git tag based on Semantic Versioning keyword"
      echo
      echo "Usage: git_tag <major|minor|patch>"
      echo
      echo "Example:"
      echo "  git_tag major"
      echo
      echo "If this is your first tag, use 'git tag' to set up your first one."
  esac

  if [ "$version" ]
  then
    git tag -a "$prefix$version" -m "Version $version"
    echo "$prefix$version created!"
  fi
}
