snippet class "Class"
# *************************************
#
#   ${1:Class Name}
#   -> ${2:Description}
#
# *************************************
#
# @param $element  { jQuery object }
# @param className { string }
#
# *************************************

class @Spellbook.Classes.${1:ClassName}

	# -------------------------------------
	#   Private Variables
	# -------------------------------------

	_settings : {}

	# -------------------------------------
	#   Constructor
	# -------------------------------------

	constructor : (@options) -> @init()

	# -------------------------------------
	#   Initialize
	# -------------------------------------

	init : ->
		@_settings = $.extend
			$${2:element} : $3
		, @options

		@_setEventHandlers()

	# -------------------------------------
	#   Set Event Handlers
	# -------------------------------------

	_setEventHandlers: ->
		# ...

# -------------------------------------
#   Usage
# -------------------------------------
#
# new Spellbook.Classes.$1()
#
endsnippet

snippet helper "Helper"
# *************************************
#
#   ${1:Helper Name}
#   -> ${2:Description}
#
# *************************************
#
# @param item { string }
#
# *************************************

@Spellbook.Helpers.${3:helperName} = (item) ->
  ${4:# ...}

# -------------------------------------
#   Usage
# -------------------------------------
#
# Spellbook.Helpers.$3()
#
endsnippet

snippet icb "Inline Callback"
${1:_settings}.on${2:Callback}($1) if $1.on$2?$0
endsnippet

snippet module "Module"
# *************************************
#
#   ${1:Module Name}
#   -> ${2:Description}
#
# *************************************
#
# @param $element { jQuery object }
#
# *************************************

@Spellbook.Modules.${1:ModuleName} = do ->

	# -------------------------------------
	#   Private Variables
	# -------------------------------------

	_settings = {}

	# -------------------------------------
	#   Initialize
	# -------------------------------------

	init = (options) ->
		_settings = $.extend
			$${2:element} : $3
		, options

		_setEventHandlers()

	# -------------------------------------
	#   Set Event Handlers
	# -------------------------------------

	_setEventHandlers = ->
		# ...

	# -------------------------------------
	#   Public Methods
	# -------------------------------------

	init : init

# -------------------------------------
#   Usage
# -------------------------------------
#
# Spellbook.Modules.$1.init()
#
endsnippet

snippet service "Service"
# *************************************
#
#   ${1:Service Name}
#   -> ${2:Description}
#
# *************************************
#
# @param $element { jQuery object }
#
# *************************************

@Spellbook.Services.${3:serviceName} = (options) ->
  settings = $.extend
    $element : $('.js-element')
  , options

  ${4:# ...}

# -------------------------------------
#   Usage
# -------------------------------------
#
# Spellbook.Services.$3()
#   # ...
#
endsnippet
